@attribute [Route(PageUrls.BuilderPage)]
@attribute [Route("{culture?}" + PageUrls.BuilderPage)]
@attribute [Authorize(Policy = AuthPolicies.PRIVILEGED_ACCESS)]
@inherits AppPageBase

@using SRAAI.Shared.Dtos.AbhayYojana
@using SRAAI.Client.Core.Components.Pages.BuilderData

<AppPageData Title="Summary List"
             PageTitle="Summary List" />

<section>

    <BitStack Horizontal HorizontalAlign="BitAlignment.Start" Gap="10px">
        <BitFileUpload @ref="fileUploadRef2"
                       AutoReset
                       AutoUpload
                       HideFileView
                       Accept=".xlsx"
                       MaxSize="1024 * 1024 * 50"
                       UploadUrlProvider="GetBuilderUploadUrl"
                       UploadRequestHttpHeadersProvider="GetBuilderUploadRequestHeaders"
                       OnUploading="() => isBusy = true"
                       OnUploadFailed="HandleUploadFailed"
                       OnUploadComplete="HandleBuilderUploadComplete">
            <LabelTemplate>
                <BitButton IconName="@BitIconName.Upload"
                           Disabled="isBusy"
                           OnClick="() => fileUploadRef2.Browse()">Select Builder Excel file</BitButton>
            </LabelTemplate>
        </BitFileUpload>

    </BitStack>

    @if (isLoadingStatistics)
    {
        <p>Loading data...</p>
    }
    else if (statistics is null || !statistics.Any())
    {
        <p>No records found.</p>
    }
    else
    {
    
        <h4 style="color:green;">Matching Records</h4>
        @RenderTable(statistics.Where(x => x.Status == "Matching"), "bg-success text-white")

        <h4 style="color:orange;">Not Found Records (Present in DB but missing in Excel)</h4>
        @RenderTable(statistics.Where(x => x.Status == "NotFound"), "bg-warning")

        <h4 style="color:deeppink;">Not Matching Records</h4>
        @RenderTable(statistics.Where(x => x.Status == "NotMatching"), "bg-pink-100", true)

        <h4 style="color:red;">Additional Records (Present in Excel but missing in DB)</h4>
        @RenderTable(statistics.Where(x => x.Status == "Additional"), "bg-danger text-white")
    }

    <BitButton IconName="@BitIconName.View"
               Style="margin-top:15px;"
               OnClick="Cancel">Cancel</BitButton>
</section>

@code {
    private RenderFragment RenderTable(IEnumerable<AbhayYojanaApplicationDto> items, string rowClass, bool highlightCells = false) => __builder =>
    {
        if (items is null || !items.Any())
        {
            __builder.AddContent(0, "No records.");
            return;
        }

        __builder.OpenElement(1, "table");
        __builder.AddAttribute(2, "class", "table table-striped");
        __builder.AddAttribute(3, "border", "1");
        __builder.AddAttribute(4, "style", "border: 2px solid #333; width: 100%; text-align: center; vertical-align: middle; margin-bottom:20px;");
        __builder.OpenElement(5, "thead");
        __builder.AddMarkupContent(6, @"
            <tr>
                <th>अ. क्र.</th>
                <th>म. झो. क्र.</th>
                <th>झोपडीधारकाचे नाव</th>
                <th>अर्जदाराचे नाव</th>
                <th>वर्ष</th>
                <th>भाग क्र.</th>
                <th>मतदार यादितील अ. क्र.</th>
                <th>झोपडीचा वापर</th>
                <th>चटई क्षेत्र (चौ. फु.)</th>
                <th>पुरावे</th>
                <th>पात्रता</th>
                <th>शेरा</th>
            </tr>");
        __builder.CloseElement(); // thead

        __builder.OpenElement(7, "tbody");

        int seq = 8;
        foreach (var item in items)
        {
            __builder.OpenElement(seq++, "tr");
            __builder.AddAttribute(seq++, "class", rowClass);

            void Cell(string value, string? fieldName = null)
            {
                string cellClass = "";
                if (highlightCells && item.ChangedFields?.Contains(fieldName ?? "") == true)
                    cellClass = "bg-pink-300";

                __builder.OpenElement(seq++, "td");
                if (!string.IsNullOrEmpty(cellClass))
                    __builder.AddAttribute(seq++, "class", cellClass);
                __builder.AddContent(seq++, value);
                __builder.CloseElement();
            }

            Cell(item.SerialNumber?.ToString() ?? "");
            Cell(item.OriginalSlumNumber.ToString() ?? "", nameof(item.OriginalSlumNumber));
            Cell(item.OriginalSlumDwellerName ?? "", nameof(item.OriginalSlumDwellerName));
            Cell(item.ApplicantName ?? "", nameof(item.ApplicantName));
            Cell(item.VoterListYear?.ToString() ?? "");
            Cell(item.VoterListPartNumber?.ToString() ?? "");
            Cell(item.VoterListSerialNumber?.ToString() ?? "");
            Cell(item.SlumUsage ?? "", nameof(item.SlumUsage));
            Cell(item.CarpetAreaSqFt?.ToString() ?? "");
            Cell(item.EvidenceDetails ?? "");
            Cell(item.EligibilityStatus ?? "");
            Cell(item.Remarks ?? "");

            __builder.CloseElement(); 
        }

        __builder.CloseElement(); 
        __builder.CloseElement(); 
    };
}

<style>
    .bg-pink-100 {
        background-color: #ffe6e6;
    }

    .bg-pink-300 {
        background-color: #ffb3b3;
    }
</style>
